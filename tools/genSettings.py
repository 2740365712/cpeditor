#!/usr/bin/python3
# -*- coding: utf-8 -*-

import os
import sys
import json

if __name__ == "__main__":
    obj = json.load(open(sys.argv[1], mode="r"))
    head = """/*
 * Copyright (C) 2019-2020 Ashar Khan <ashar786khan@gmail.com>
 *
 * This file is part of CP Editor.
 *
 * CP Editor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * I will not be responsible if CP Editor behaves in unexpected way and
 * causes your ratings to go down and or lose any important contest.
 *
 * Believe Software is "Software" and it isn't immune to bugs.
 *
 */

/*
 * This file is auto generated by tools/genSettings.py
 */

"""
    setting_helper = open("generated/SettingsHelper.hpp", mode="w")
    setting_helper.write(head)
    setting_helper.write("""#ifndef SETTINGSHELPER_HPP
#define SETTINGSHELPER_HPP

#include "Core/Settings.hpp"
#include <QFont>
#include <QRect>

namespace SettingsHelper
{
""")
    for i in range(len(obj)):
        name = obj[i]["name"]
        key = name.replace(" ", "").replace("/", "").replace("+", "p")
        typename = obj[i]["type"]
        setting_helper.write(f"    inline void set{key}({typename} value) {{ SettingsManager::set({json.dumps(name)}, value); }}\n")
        if typename == "bool":
            setting_helper.write(f"    inline bool is{key}() {{ return SettingsManager::get({json.dumps(name)}).toBool(); }}\n")
        else:
            setting_helper.write(f"    inline {typename} get{key}() {{ return SettingsManager::get({json.dumps(name)}).value<{typename}>(); }}\n")
    setting_helper.write("""}

#endif // SETTINGSHELPER_HPP""")
    setting_helper.close()
    setting_info = open("generated/SettingsInfo.hpp", mode="w")
    setting_info.write(head)
    setting_info.write("""#ifndef SETTINGSINFO_HPP
#define SETTINGSINFO_HPP

#include <QString>
#include <QFont>
#include <QRect>
#include <QByteArray>
#include <QVariant>

struct SettingInfo
{
    QString name, desc, type, ui;
    QStringList old;
    QVariant def;
    QVariant param;

    QString key() const
    {
        return name.toLower().replace('+', 'p').replace(' ', '_');
    }
};

const SettingInfo settingInfo[] =
{
""")
    for i in range(len(obj)):
        name = obj[i]["name"]
        typename = obj[i]["type"]
        if "desc" in obj[i]:
            desc = obj[i]["desc"]
        else:
            desc = name.replace('/', ' ')
        if "ui" in obj[i]:
            ui = obj[i]["ui"]
        else:
            ui = ""
        setting_info.write(f"    {{{json.dumps(name)}, {json.dumps(desc)}, \"{typename}\", \"{ui}\", {{")
        if "old" in obj[i]:
            olds = ""
            for s in obj[i]["old"]:
                olds = olds + '"' + s + '", '
            setting_info.write(olds)
        setting_info.write("}, ")
        if "default" in obj[i]:
            if typename == "QString":
                setting_info.write(json.dumps(obj[i]["default"]))
            else:
                if type(obj[i]["default"]) == type(True):
                    setting_info.write(str(obj[i]["default"]).lower())
                else:
                    setting_info.write(str(obj[i]["default"]))
        else:
            defs = {
                'QString':'""',
                'int': '0',
                'bool': 'false',
                'QRect': 'QRect()',
                'QByteArray': 'QByteArray()'
            }
            setting_info.write(defs[typename])
        if "param" in obj[i]:
            setting_info.write(f', {obj[i]["param"]}')
        setting_info.write("},\n")
    setting_info.write("""};

inline SettingInfo findSetting(const QString &name)
{
    for (const SettingInfo &si: settingInfo)
        if (si.name == name)
            return si;
    return SettingInfo();
}

#endif // SETTINGSINFO_HPP""")
    setting_info.close()